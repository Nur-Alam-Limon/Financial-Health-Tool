{"ast":null,"code":"var _jsxFileName = \"/Users/nurbevycommerce/financial-health-tool/frontend/src/App.js\",\n  _s = $RefreshSig$();\n// App.js (update the existing code)\nimport React, { useState } from 'react';\nimport InputForm from './components/InputForm';\nimport FinancialHealthScore from './components/FinancialHealthScore';\nimport Visualization from './components/Visualization';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [financialHealthScore, setFinancialHealthScore] = useState(null);\n  const calculateFinancialHealth = async ({\n    companyName,\n    income,\n    expenses,\n    debts,\n    assets\n  }) => {\n    const formatDate = date => {\n      const dd = String(date.getDate()).padStart(2, '0');\n      const mm = String(date.getMonth() + 1).padStart(2, '0'); // January is 0!\n      const yy = String(date.getFullYear()).slice(-2);\n      return `${dd}/${mm}/${yy}`;\n    };\n\n    // Convert inputs to numbers\n    income = parseFloat(income);\n    expenses = parseFloat(expenses);\n    debts = parseFloat(debts);\n    assets = parseFloat(assets);\n    const date = formatDate(new Date());\n\n    // Check if any input is not a valid number\n    if (isNaN(income) || isNaN(expenses) || isNaN(debts) || isNaN(assets)) {\n      alert('Please enter valid numbers for all inputs.');\n      return;\n    }\n\n    // Calculate ratios and overall balance\n    const expenseToIncomeRatio = expenses / income;\n    const assetToDebtRatio = assets / debts;\n    const overallBalance = income - expenses + (assets - debts);\n\n    // Define scoring logic (you can adjust these thresholds based on your criteria)\n    let score = 0;\n    if (expenseToIncomeRatio <= 0.5) {\n      score += 30;\n    } else if (expenseToIncomeRatio <= 0.7) {\n      score += 20;\n    } else if (expenseToIncomeRatio <= 1) {\n      score += 10;\n    }\n    if (assetToDebtRatio >= 2) {\n      score += 30;\n    } else if (assetToDebtRatio >= 1.5) {\n      score += 20;\n    } else if (assetToDebtRatio >= 1) {\n      score += 10;\n    }\n    if (overallBalance >= 0) {\n      score += 30;\n    } else if (overallBalance >= -500) {\n      score += 20;\n    } else if (overallBalance >= -1000) {\n      score += 10;\n    }\n\n    // Set the financial health score\n    setFinancialHealthScore(score);\n    try {\n      const secureToken = process.env.SECURE_TOKEN;\n      // Make a POST request to the backend endpoint\n      const response = await axios.post('http://localhost:4000/api/data', {\n        companyName,\n        income,\n        expenses,\n        debts,\n        assets,\n        score,\n        date\n      }, {\n        headers: {\n          Authorization: secureToken\n        }\n      });\n\n      // Handle the response as needed\n      console.log('Data saved successfully', response.data);\n    } catch (error) {\n      // Handle errors\n      console.error('Error saving data', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-div\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Financial Health Tool\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(InputForm, {\n        onSubmit: calculateFinancialHealth\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }, this), financialHealthScore !== null && /*#__PURE__*/_jsxDEV(FinancialHealthScore, {\n        financialScore: financialHealthScore\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 41\n      }, this), financialHealthScore != null && /*#__PURE__*/_jsxDEV(Visualization, {\n        financialScore: financialHealthScore\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 40\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"vL2OX7Vyr1errUyBG2ERBerwm3A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","InputForm","FinancialHealthScore","Visualization","axios","jsxDEV","_jsxDEV","App","_s","financialHealthScore","setFinancialHealthScore","calculateFinancialHealth","companyName","income","expenses","debts","assets","formatDate","date","dd","String","getDate","padStart","mm","getMonth","yy","getFullYear","slice","parseFloat","Date","isNaN","alert","expenseToIncomeRatio","assetToDebtRatio","overallBalance","score","secureToken","process","env","SECURE_TOKEN","response","post","headers","Authorization","console","log","data","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","financialScore","_c","$RefreshReg$"],"sources":["/Users/nurbevycommerce/financial-health-tool/frontend/src/App.js"],"sourcesContent":["// App.js (update the existing code)\nimport React, { useState } from 'react';\nimport InputForm from './components/InputForm';\nimport FinancialHealthScore from './components/FinancialHealthScore';\nimport Visualization from './components/Visualization';\nimport axios from 'axios';\n\nconst App = () => {\n  const [financialHealthScore, setFinancialHealthScore] = useState(null);\n\n  const calculateFinancialHealth = async ({ companyName, income, expenses, debts, assets }) => {\n    const formatDate = (date) => {\n      const dd = String(date.getDate()).padStart(2, '0');\n      const mm = String(date.getMonth() + 1).padStart(2, '0'); // January is 0!\n      const yy = String(date.getFullYear()).slice(-2);\n  \n      return `${dd}/${mm}/${yy}`;\n    };\n    \n    // Convert inputs to numbers\n    income = parseFloat(income);\n    expenses = parseFloat(expenses);\n    debts = parseFloat(debts);\n    assets = parseFloat(assets);\n\n    const date=formatDate(new Date());\n  \n\n    // Check if any input is not a valid number\n    if (isNaN(income) || isNaN(expenses) || isNaN(debts) || isNaN(assets)) {\n      alert('Please enter valid numbers for all inputs.');\n      return;\n    }\n\n    // Calculate ratios and overall balance\n    const expenseToIncomeRatio = expenses / income;\n    const assetToDebtRatio = assets / debts;\n    const overallBalance = (income - expenses) + (assets - debts);\n\n    // Define scoring logic (you can adjust these thresholds based on your criteria)\n    let score = 0;\n\n    if (expenseToIncomeRatio <= 0.5) {\n      score += 30;\n    } else if (expenseToIncomeRatio <= 0.7) {\n      score += 20;\n    } else if (expenseToIncomeRatio <= 1) {\n      score += 10;\n    }\n\n    if (assetToDebtRatio >= 2) {\n      score += 30;\n    } else if (assetToDebtRatio >= 1.5) {\n      score += 20;\n    } else if (assetToDebtRatio >= 1) {\n      score += 10;\n    }\n\n    if (overallBalance >= 0) {\n      score += 30;\n    } else if (overallBalance >= -500) {\n      score += 20;\n    } else if (overallBalance >= -1000) {\n      score += 10;\n    }\n\n    // Set the financial health score\n    setFinancialHealthScore(score);\n\n    try {\n      const secureToken = process.env.SECURE_TOKEN;\n      // Make a POST request to the backend endpoint\n      const response = await axios.post('http://localhost:4000/api/data', {\n        companyName,\n        income,\n        expenses,\n        debts,\n        assets,\n        score,\n        date\n      }, {\n        headers: {\n          Authorization: secureToken,\n        },\n      }\n      );\n\n      // Handle the response as needed\n      console.log('Data saved successfully', response.data);\n\n    } catch (error) {\n      // Handle errors\n      console.error('Error saving data', error);\n    }\n    \n  };\n\n  return (\n    <div className='main-div'>\n      <div>\n      <h1>Financial Health Tool</h1>\n      <InputForm onSubmit={calculateFinancialHealth} />\n      {financialHealthScore !== null && <FinancialHealthScore financialScore={financialHealthScore} />}\n      {financialHealthScore != null && <Visualization financialScore={financialHealthScore} />}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}