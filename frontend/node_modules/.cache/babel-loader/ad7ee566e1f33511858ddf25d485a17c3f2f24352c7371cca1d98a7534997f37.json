{"ast":null,"code":"var _jsxFileName = \"/Users/nurbevycommerce/financial-health-tool/src/App.js\",\n  _s = $RefreshSig$();\n// App.js (update the existing code)\nimport React, { useState } from 'react';\nimport InputForm from './components/InputForm';\nimport FinancialHealthScore from './components/FinancialHealthScore';\nimport Visualization from './components/Visualization';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [financialData, setFinancialData] = useState({});\n  const [financialHealthScore, setFinancialHealthScore] = useState(null);\n  const calculateFinancialHealth = ({\n    income,\n    expenses,\n    debts,\n    assets\n  }) => {\n    // Convert inputs to numbers\n    income = parseFloat(income);\n    expenses = parseFloat(expenses);\n    debts = parseFloat(debts);\n    assets = parseFloat(assets);\n\n    // Check if any input is not a valid number\n    if (isNaN(income) || isNaN(expenses) || isNaN(debts) || isNaN(assets)) {\n      alert('Please enter valid numbers for all inputs.');\n      return;\n    }\n\n    // Calculate ratios and overall balance\n    const expenseToIncomeRatio = expenses / income;\n    const assetToDebtRatio = assets / debts;\n    const overallBalance = income - expenses + (assets - debts);\n\n    // Define scoring logic (you can adjust these thresholds based on your criteria)\n    let score = 0;\n    if (expenseToIncomeRatio <= 0.5) {\n      score += 30;\n    } else if (expenseToIncomeRatio <= 0.7) {\n      score += 20;\n    } else if (expenseToIncomeRatio <= 1) {\n      score += 10;\n    }\n    if (assetToDebtRatio >= 2) {\n      score += 30;\n    } else if (assetToDebtRatio >= 1.5) {\n      score += 20;\n    } else if (assetToDebtRatio >= 1) {\n      score += 10;\n    }\n    if (overallBalance >= 0) {\n      score += 30;\n    } else if (overallBalance >= -500) {\n      score += 20;\n    } else if (overallBalance >= -1000) {\n      score += 10;\n    }\n\n    // Set the financial health score\n    setFinancialHealthScore(score);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Financial Health Tool\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputForm, {\n      onSubmit: calculateFinancialHealth\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), financialHealthScore !== null && /*#__PURE__*/_jsxDEV(FinancialHealthScore, {\n      score: financialHealthScore\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 41\n    }, this), financialHealthScore != null && /*#__PURE__*/_jsxDEV(Visualization, {\n      financialScores: financialHealthScore\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 40\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"JKyl5nskCpmAUG7NeZLFWcvMFIA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","InputForm","FinancialHealthScore","Visualization","jsxDEV","_jsxDEV","App","_s","financialData","setFinancialData","financialHealthScore","setFinancialHealthScore","calculateFinancialHealth","income","expenses","debts","assets","parseFloat","isNaN","alert","expenseToIncomeRatio","assetToDebtRatio","overallBalance","score","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","financialScores","_c","$RefreshReg$"],"sources":["/Users/nurbevycommerce/financial-health-tool/src/App.js"],"sourcesContent":["// App.js (update the existing code)\nimport React, { useState } from 'react';\nimport InputForm from './components/InputForm';\nimport FinancialHealthScore from './components/FinancialHealthScore';\nimport Visualization from './components/Visualization';\n\nconst App = () => {\n  const [financialData, setFinancialData] = useState({});\n  const [financialHealthScore, setFinancialHealthScore] = useState(null);\n\n  const calculateFinancialHealth = ({ income, expenses, debts, assets }) => {\n    // Convert inputs to numbers\n    income = parseFloat(income);\n    expenses = parseFloat(expenses);\n    debts = parseFloat(debts);\n    assets = parseFloat(assets);\n\n    // Check if any input is not a valid number\n    if (isNaN(income) || isNaN(expenses) || isNaN(debts) || isNaN(assets)) {\n      alert('Please enter valid numbers for all inputs.');\n      return;\n    }\n\n    // Calculate ratios and overall balance\n    const expenseToIncomeRatio = expenses / income;\n    const assetToDebtRatio = assets / debts;\n    const overallBalance = (income - expenses) + (assets - debts);\n\n    // Define scoring logic (you can adjust these thresholds based on your criteria)\n    let score = 0;\n\n    if (expenseToIncomeRatio <= 0.5) {\n      score += 30;\n    } else if (expenseToIncomeRatio <= 0.7) {\n      score += 20;\n    } else if (expenseToIncomeRatio <= 1) {\n      score += 10;\n    }\n\n    if (assetToDebtRatio >= 2) {\n      score += 30;\n    } else if (assetToDebtRatio >= 1.5) {\n      score += 20;\n    } else if (assetToDebtRatio >= 1) {\n      score += 10;\n    }\n\n    if (overallBalance >= 0) {\n      score += 30;\n    } else if (overallBalance >= -500) {\n      score += 20;\n    } else if (overallBalance >= -1000) {\n      score += 10;\n    }\n\n    // Set the financial health score\n    setFinancialHealthScore(score);\n  };\n\n  return (\n    <div>\n      <h1>Financial Health Tool</h1>\n      <InputForm onSubmit={calculateFinancialHealth} />\n      {financialHealthScore !== null && <FinancialHealthScore score={financialHealthScore} />}\n      {financialHealthScore != null && <Visualization financialScores={financialHealthScore} />}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}