{"ast":null,"code":"var _jsxFileName = \"/Users/nurbevycommerce/financial-health-tool/frontend/src/App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useState } from 'react';\nimport InputForm from './components/InputForm';\nimport FinancialHealthScore from './components/FinancialHealthScore';\nimport Visualization from './components/Visualization';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [financialHealthScore, setFinancialHealthScore] = useState(null);\n  const [scores, setScores] = useState([]);\n  const [date, setDate] = useState([]);\n  const calculateFinancialHealth = async ({\n    companyName,\n    income,\n    expenses,\n    debts,\n    assets\n  }) => {\n    const formatDate = date => {\n      const dd = String(date.getDate()).padStart(2, '0');\n      const mm = String(date.getMonth() + 1).padStart(2, '0');\n      const yy = String(date.getFullYear()).slice(-2);\n      return `${dd}/${mm}/${yy}`;\n    };\n\n    // Convert inputs to numbers\n    income = parseFloat(income);\n    expenses = parseFloat(expenses);\n    debts = parseFloat(debts);\n    assets = parseFloat(assets);\n    const date = formatDate(new Date());\n\n    // Check if any input is not a valid number\n    if (isNaN(income) || isNaN(expenses) || isNaN(debts) || isNaN(assets)) {\n      alert('Please enter valid numbers for all inputs.');\n      return;\n    }\n\n    // Calculate ratios and overall balance\n    const expenseToIncomeRatio = expenses / income;\n    const assetToDebtRatio = assets / debts;\n    const overallBalance = income - expenses + (assets - debts);\n\n    // Define scoring logic\n    let score = 0;\n    if (expenseToIncomeRatio <= 0.5) {\n      score += 30;\n    } else if (expenseToIncomeRatio <= 0.7) {\n      score += 20;\n    } else if (expenseToIncomeRatio <= 1) {\n      score += 10;\n    }\n    if (assetToDebtRatio >= 2) {\n      score += 30;\n    } else if (assetToDebtRatio >= 1.5) {\n      score += 20;\n    } else if (assetToDebtRatio >= 1) {\n      score += 10;\n    }\n    if (overallBalance >= 0) {\n      score += 30;\n    } else if (overallBalance >= -500) {\n      score += 20;\n    } else if (overallBalance >= -1000) {\n      score += 10;\n    }\n\n    // Set the financial health score\n    setFinancialHealthScore(score);\n    try {\n      const secureToken = process.env.SECURE_TOKEN;\n      // Make a POST request to the backend endpoint\n      const response = await axios.post('http://localhost:4000/api/data', {\n        companyName,\n        income,\n        expenses,\n        debts,\n        assets,\n        score,\n        date\n      }, {\n        headers: {\n          Authorization: secureToken\n        }\n      });\n\n      //console.log('Data saved successfully', response.data);\n    } catch (error) {\n      // Handle errors\n      //console.error('Error saving data', error);\n    }\n    try {\n      const secureToken = process.env.SECURE_TOKEN;\n      const response = await axios.get(`http://localhost:4000/api/data?companyName=${companyName}`, {\n        headers: {\n          Authorization: secureToken\n        }\n      });\n      setDate(response.data.dates);\n      setScores(response.data.scores);\n\n      //console.log('Data get successfully', response.data);\n    } catch (error) {\n      // Handle errors\n      console.error('Error getting data', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-div\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Financial Health Tool\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputForm, {\n        onSubmit: calculateFinancialHealth\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), financialHealthScore !== null && /*#__PURE__*/_jsxDEV(FinancialHealthScore, {\n        financialScore: financialHealthScore\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 43\n      }, this), scores.length > 0 && /*#__PURE__*/_jsxDEV(Visualization, {\n        scores: scores,\n        date: date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"WtenhDQGMAMQT8l60UazJh66VEo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","InputForm","FinancialHealthScore","Visualization","axios","jsxDEV","_jsxDEV","App","_s","financialHealthScore","setFinancialHealthScore","scores","setScores","date","setDate","calculateFinancialHealth","companyName","income","expenses","debts","assets","formatDate","dd","String","getDate","padStart","mm","getMonth","yy","getFullYear","slice","parseFloat","Date","isNaN","alert","expenseToIncomeRatio","assetToDebtRatio","overallBalance","score","secureToken","process","env","SECURE_TOKEN","response","post","headers","Authorization","error","get","data","dates","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","financialScore","length","_c","$RefreshReg$"],"sources":["/Users/nurbevycommerce/financial-health-tool/frontend/src/App.js"],"sourcesContent":["// App.js\nimport React, { useState } from 'react';\nimport InputForm from './components/InputForm';\nimport FinancialHealthScore from './components/FinancialHealthScore';\nimport Visualization from './components/Visualization';\nimport axios from 'axios';\n\nconst App = () => {\n  const [financialHealthScore, setFinancialHealthScore] = useState(null);\n  const [scores, setScores]=useState([]);\n  const[date, setDate]=useState([]);\n\n  const calculateFinancialHealth = async ({ companyName, income, expenses, debts, assets }) => {\n    const formatDate = (date) => {\n      const dd = String(date.getDate()).padStart(2, '0');\n      const mm = String(date.getMonth() + 1).padStart(2, '0'); \n      const yy = String(date.getFullYear()).slice(-2);\n  \n      return `${dd}/${mm}/${yy}`;\n    };\n\n    // Convert inputs to numbers\n    income = parseFloat(income);\n    expenses = parseFloat(expenses);\n    debts = parseFloat(debts);\n    assets = parseFloat(assets);\n\n    const date=formatDate(new Date());\n  \n\n    // Check if any input is not a valid number\n    if (isNaN(income) || isNaN(expenses) || isNaN(debts) || isNaN(assets)) {\n      alert('Please enter valid numbers for all inputs.');\n      return;\n    }\n\n    // Calculate ratios and overall balance\n    const expenseToIncomeRatio = expenses / income;\n    const assetToDebtRatio = assets / debts;\n    const overallBalance = (income - expenses) + (assets - debts);\n\n    // Define scoring logic\n    let score = 0;\n\n    if (expenseToIncomeRatio <= 0.5) {\n      score += 30;\n    } else if (expenseToIncomeRatio <= 0.7) {\n      score += 20;\n    } else if (expenseToIncomeRatio <= 1) {\n      score += 10;\n    }\n\n    if (assetToDebtRatio >= 2) {\n      score += 30;\n    } else if (assetToDebtRatio >= 1.5) {\n      score += 20;\n    } else if (assetToDebtRatio >= 1) {\n      score += 10;\n    }\n\n    if (overallBalance >= 0) {\n      score += 30;\n    } else if (overallBalance >= -500) {\n      score += 20;\n    } else if (overallBalance >= -1000) {\n      score += 10;\n    }\n\n    // Set the financial health score\n    setFinancialHealthScore(score);\n\n    try {\n      const secureToken = process.env.SECURE_TOKEN;\n      // Make a POST request to the backend endpoint\n      const response = await axios.post('http://localhost:4000/api/data', {\n        companyName,\n        income,\n        expenses,\n        debts,\n        assets,\n        score,\n        date\n      }, {\n        headers: {\n          Authorization: secureToken,\n        },\n      }\n      );\n\n      //console.log('Data saved successfully', response.data);\n\n    } catch (error) {\n      // Handle errors\n      //console.error('Error saving data', error);\n    }\n\n    try {\n      const secureToken = process.env.SECURE_TOKEN;\n\n      const response = await axios.get(`http://localhost:4000/api/data?companyName=${companyName}`, {\n        headers: {\n          Authorization: secureToken,\n        },\n      }\n      );\n\n      setDate(response.data.dates);\n      setScores(response.data.scores);\n\n      \n      //console.log('Data get successfully', response.data);\n\n    } catch (error) {\n      // Handle errors\n      console.error('Error getting data', error);\n    }\n    \n  };\n\n  return (\n    <div className='main-div'>\n      <div>\n        <h1>Financial Health Tool</h1>\n        <InputForm onSubmit={calculateFinancialHealth} />\n        {financialHealthScore !== null && <FinancialHealthScore financialScore={financialHealthScore} />}\n        {scores.length>0 && <Visualization scores={scores} date={date}/>}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}